<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cadastre-se</title>
    <link rel="stylesheet" href="css/styleLogin.css">
    <!-- Simple Notify CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simple-notify@1.0.4/dist/simple-notify.min.css">
    <style>
        .notifyjs-container {
            z-index: 10000 !important;
        }
    </style>
    <script>
        // Função para validar CNPJ
        function validateCNPJ(cnpj) {
            // Remove caracteres não numéricos
            cnpj = cnpj.replace(/[\D]/g, '');
            
            // Verifica se tem 14 dígitos
            if (cnpj.length !== 14) {
                return false;
            }
            
            // Elimina CNPJs inválidos conhecidos
            if (cnpj === '00000000000000' || 
                cnpj === '11111111111111' || 
                cnpj === '22222222222222' || 
                cnpj === '33333333333333' || 
                cnpj === '44444444444444' || 
                cnpj === '55555555555555' || 
                cnpj === '66666666666666' || 
                cnpj === '77777777777777' || 
                cnpj === '88888888888888' || 
                cnpj === '99999999999999') {
                return false;
            }
            
            // Valida DVs
            let tamanho = cnpj.length - 2;
            let numeros = cnpj.substring(0, tamanho);
            const digitos = cnpj.substring(tamanho);
            let soma = 0;
            let pos = tamanho - 7;
            
            for (let i = tamanho; i >= 1; i--) {
                soma += numeros.charAt(tamanho - i) * pos--;
                if (pos < 2) pos = 9;
            }
            
            let resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
            if (resultado !== parseInt(digitos.charAt(0))) {
                return false;
            }
            
            tamanho = tamanho + 1;
            numeros = cnpj.substring(0, tamanho);
            soma = 0;
            pos = tamanho - 7;
            
            for (let i = tamanho; i >= 1; i--) {
                soma += numeros.charAt(tamanho - i) * pos--;
                if (pos < 2) pos = 9;
            }
            
            resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
            if (resultado !== parseInt(digitos.charAt(1))) {
                return false;
            }
            
            return true;
        }
        
        // Função para formatar CNPJ
        function formatCNPJ(cnpj) {
            // Remove tudo que não for número
            cnpj = cnpj.replace(/[\D]/g, '');
            
            // Limita a 14 dígitos
            cnpj = cnpj.substring(0, 14);
            
            return cnpj;
        }
        
        // Função para validar e formatar o CNPJ enquanto o usuário digita
        function handleCNPJInput(input, errorElementId) {
            const cnpj = input.value;
            const formattedCNPJ = formatCNPJ(cnpj);
            input.value = formattedCNPJ; // Atualiza o valor formatado
            
            const errorElement = document.getElementById(errorElementId);
            
            // Valida o CNPJ apenas se tiver 14 dígitos
            if (formattedCNPJ.length === 14) {
                if (!validateCNPJ(formattedCNPJ)) {
                    if (errorElement) {
                        errorElement.textContent = 'CNPJ inválido. Por favor, verifique o número.';
                        errorElement.style.display = 'block';
                    }
                    input.setCustomValidity('CNPJ inválido');
                    return false;
                } else {
                    if (errorElement) {
                        errorElement.style.display = 'none';
                    }
                    input.setCustomValidity('');
                    return true;
                }
            } else if (formattedCNPJ.length > 0) {
                if (errorElement) {
                    errorElement.textContent = 'CNPJ deve conter 14 dígitos';
                    errorElement.style.display = 'block';
                }
                input.setCustomValidity('CNPJ deve conter 14 dígitos');
                return false;
            } else {
                if (errorElement) {
                    errorElement.style.display = 'none';
                }
                input.setCustomValidity('');
                return false;
            }
        }
        
        // Função para validar CPF
        function validateCPF(cpf) {
            // Remove caracteres não numéricos
            cpf = cpf.replace(/\D/g, '');
            
            // Verifica se tem 11 dígitos
            if (cpf.length !== 11) {
                return false;
            }
            
            // Verifica se todos os dígitos são iguais (CPF inválido)
            if (/^(\d)\1+$/.test(cpf)) {
                return false;
            }
            
            // Validação do primeiro dígito verificador
            let sum = 0;
            for (let i = 0; i < 9; i++) {
                sum += parseInt(cpf.charAt(i)) * (10 - i);
            }
            let remainder = 11 - (sum % 11);
            let digit1 = remainder >= 10 ? 0 : remainder;
            
            // Validação do segundo dígito verificador
            sum = 0;
            for (let i = 0; i < 10; i++) {
                sum += parseInt(cpf.charAt(i)) * (11 - i);
            }
            remainder = 11 - (sum % 11);
            let digit2 = remainder >= 10 ? 0 : remainder;
            
            // Verifica se os dígitos calculados são iguais aos fornecidos
            return (parseInt(cpf.charAt(9)) === digit1 && parseInt(cpf.charAt(10)) === digit2);
        }
        
        // Função para formatar CPF
        function formatCPF(cpf) {
            // Remove tudo que não for número
            cpf = cpf.replace(/\D/g, '');
            
            // Limita a 11 dígitos
            cpf = cpf.substring(0, 11);
            
            return cpf;
        }
        
        // Função para validar e formatar o CPF enquanto o usuário digita
        function handleCPFInput(input, errorElementId) {
            const cpf = input.value;
            const formattedCPF = formatCPF(cpf);
            input.value = formattedCPF; // Atualiza o valor formatado
            
            const errorElement = document.getElementById(errorElementId);
            
            // Valida o CPF apenas se tiver 11 dígitos
            if (formattedCPF.length === 11) {
                if (!validateCPF(formattedCPF)) {
                    if (errorElement) {
                        errorElement.textContent = 'CPF inválido. Por favor, verifique o número.';
                        errorElement.style.display = 'block';
                    }
                    input.setCustomValidity('CPF inválido');
                    return false;
                } else {
                    if (errorElement) {
                        errorElement.style.display = 'none';
                    }
                    input.setCustomValidity('');
                    return true;
                }
            } else if (formattedCPF.length > 0) {
                if (errorElement) {
                    errorElement.textContent = 'CPF deve conter 11 dígitos';
                    errorElement.style.display = 'block';
                }
                input.setCustomValidity('CPF deve conter 11 dígitos');
                return false;
            } else {
                if (errorElement) {
                    errorElement.style.display = 'none';
                }
                input.setCustomValidity('');
                return false;
            }
        }
        
        // Funções para manipulação de formulários e CEP
        function showForm(formType) {
            //Esconde todos os formulários
            document.getElementById('registerAluno').style.display = 'none';
            document.getElementById('registerAcademia').style.display = 'none';
            document.getElementById('registerProfissional').style.display = 'none';

            document.getElementById('register' + formType.charAt(0).toUpperCase() + formType.slice(1)).style.display = 'block';
        }
        window.showForm = showForm;

        function mascaraCEP(event) {
            let cep = event.target.value;
            cep = cep.replace(/\D/g, "");
            cep = cep.replace(/^(\d{5})(\d)/, "$1-$2");
            event.target.value = cep;
        }

        function mascaraCEPAcad(event) {
            let cep = event.target.value;
            cep = cep.replace(/\D/g, "");
            cep = cep.replace(/^(\d{5})(\d)/, "$1-$2");
            event.target.value = cep;
        }

        function pesquisacep(cep, formType = 'aluno') {
            cep = cep.replace(/\D/g, '');

            if (cep === "" || cep.length !== 8) {
                alert("CEP inválido. Deve conter 8 dígitos.");
                return;
            }

            const fieldIds = {
                aluno: {
                    cep: 'cep',
                    logradouro: 'rua',
                    bairro: 'bairro',
                    localidade: 'cidade',
                    uf: 'uf'
                },
                academia: {
                    cep: 'cepAcad',
                    logradouro: 'ruaAcad',
                    bairro: 'bairroAcad',
                    localidade: 'cidadeAcad',
                    uf: 'ufAcad'
                }
            };

            const fields = fieldIds[formType];

            const script = document.createElement('script');
            script.src = `https://viacep.com.br/ws/${cep}/json/?callback=preencheCampos${formType}`;
            document.body.appendChild(script);

            window[`preencheCampos${formType}`] = function (conteudo) {
                if (!("erro" in conteudo)) {
                    document.getElementById(fields.logradouro).value = conteudo.logradouro;
                    document.getElementById(fields.bairro).value = conteudo.bairro;
                    document.getElementById(fields.localidade).value = conteudo.localidade;
                    document.getElementById(fields.uf).value = conteudo.uf;
                } else {
                    alert("CEP não encontrado.");
                }
                document.body.removeChild(script);
                delete window[`preencheCampos${formType}`];
            };
        }

        function alterType() {
            const radios = document.querySelectorAll('input[name="tipoProf"]');
            const labelDinamica = document.getElementById('labelCpfCnpj');

            radios.forEach(radio => {
                radio.addEventListener('change', function () {
                    if (this.checked) {
                        labelDinamica.textContent = this.value;
                    }
                });
            });
        }

        // Função para validar formulário antes do envio
        function validateForm(event, cpfFieldId, errorElementId) {
            const cpfInput = document.getElementById(cpfFieldId);
            if (cpfInput) {
                if (!handleCPFInput(cpfInput, errorElementId)) {
                    event.preventDefault();
                    return false;
                }
            }
            return true;
        }

        // Função para validar formulário de academia antes do envio
        function validateAcademiaForm(event) {
            const cnpjInput = document.getElementById('cpnjAcademyRegister');
            if (cnpjInput) {
                if (!handleCNPJInput(cnpjInput, 'cnpjError')) {
                    event.preventDefault();
                    return false;
                }
            }
            return true;
        }

        // Função para mostrar notificação e redirecionar
        function showNotificationAndRedirect(isSuccess, message, redirectUrl = '/login') {
            new Notify({
                status: isSuccess ? 'success' : 'error',
                title: isSuccess ? 'Sucesso!' : 'Erro!',
                text: message,
                effect: 'fade',
                speed: 300,
                showCloseButton: true,
                autoclose: true,
                autotimeout: 5000,
                gap: 20,
                distance: 20,
                type: isSuccess ? 1 : 3,
                position: 'right top'
            });

            // Redireciona após um atraso para permitir que o usuário veja a mensagem
            setTimeout(() => {
                window.location.href = redirectUrl;
            }, 3000);
        }

        // Função para lidar com o envio do formulário via AJAX
async function handleFormSubmit(form, formData, successMessage) {
    try {
        let formDataObj = {};
        // Detecta qual formulário está sendo enviado e monta os campos corretos
        if (form.id === 'formAluno') {
            formDataObj = {
                fullname: form.querySelector('[name="fullname"]')?.value || '',
                emailRegister: form.querySelector('[name="emailRegister"]')?.value || '',
                passwordRegister: form.querySelector('[name="passwordRegister"]')?.value || '',
                passwordRegisterConfirm: form.querySelector('[name="passwordRegisterConfirm"]')?.value || '',
                numberRegister: form.querySelector('[name="numberRegister"]')?.value || '',
                dataNasc: form.querySelector('[name="dataNasc"]')?.value || '',
                cep: form.querySelector('[name="cep"]')?.value || '',
                rua: form.querySelector('[name="rua"]')?.value || '',
                bairro: form.querySelector('[name="bairro"]')?.value || '',
                cidade: form.querySelector('[name="cidade"]')?.value || '',
                uf: form.querySelector('[name="uf"]')?.value || '',
                numero: form.querySelector('[name="numero"]')?.value || '',
                complemento: form.querySelector('[name="complemento"]')?.value || '',
                cpfRegister: form.querySelector('[name="cpfRegister"]')?.value || '',
                plans: form.querySelector('[name="plans"]')?.value || '',
                numberCardRegister: form.querySelector('[name="numberCardRegister"]')?.value || '',
                nameCardRegister: form.querySelector('[name="nameCardRegister"]')?.value || '',
                validityDate: form.querySelector('[name="validityDate"]')?.value || '',
                cvvValidation: form.querySelector('[name="cvvValidation"]')?.value || ''
            };
            console.log('Dados do formulário de aluno:', formDataObj);
        } else if (form.id === 'formAcademia') {
            formDataObj = {
                nameAcademyRegister: form.querySelector('[name="nameAcademyRegister"]')?.value || '',
                cpnjAcademyRegister: form.querySelector('[name="cpnjAcademyRegister"]')?.value || '',
                emailAcademyRegister: form.querySelector('[name="emailAcademyRegister"]')?.value || '',
                cellAcademyRegister: form.querySelector('[name="cellAcademyRegister"]')?.value || '',
                passwordAcademyRegister: form.querySelector('[name="passwordAcademyRegister"]')?.value || '',
                cepAcad: form.querySelector('[name="cepAcad"]')?.value || '',
                ruaAcad: form.querySelector('[name="ruaAcad"]')?.value || '',
                bairroAcad: form.querySelector('[name="bairroAcad"]')?.value || '',
                cidadeAcad: form.querySelector('[name="cidadeAcad"]')?.value || '',
                ufAcad: form.querySelector('[name="ufAcad"]')?.value || '',
                numeroAcad: form.querySelector('[name="numeroAcad"]')?.value || '',
                complementoAcad: form.querySelector('[name="complementoAcad"]')?.value || '',
                capacityAcademyRegister: form.querySelector('[name="capacityAcademyRegister"]')?.value || '',
                hourAcademyRegisterAb: form.querySelector('[name="hourAcademyRegisterAb"]')?.value || '',
                hourAcademyRegisterEnc: form.querySelector('[name="hourAcademyRegisterEnc"]')?.value || '',
                musculacao: form.querySelector('[name="musculacao"]')?.checked ? 'on' : '',
                crossfit: form.querySelector('[name="crossfit"]')?.checked ? 'on' : '',
                cardio: form.querySelector('[name="cardio"]')?.checked ? 'on' : ''
            };
        } else if (form.id === 'formProfissional') {
            formDataObj = {
                fullname: form.querySelector('[name="fullname"]')?.value || '',
                emailRegister: form.querySelector('[name="emailRegister"]')?.value || '',
                numberRegister: form.querySelector('[name="numberRegister"]')?.value || '',
                numberDoc: form.querySelector('[name="numberDoc"]')?.value || '',
                profession: form.querySelector('[name="profession"]')?.value || '',
                profissionalReg: form.querySelector('[name="profissionalReg"]')?.value || '',
                passwordRegister: form.querySelector('[name="passwordRegister"]')?.value || '',
                passwordRegisterConfirm: form.querySelector('[name="passwordRegisterConfirm"]')?.value || ''
            };
            console.log('Dados do formulário de profissional:', formDataObj);
        }

        // Remove campos vazios
        Object.keys(formDataObj).forEach(key => {
            if (formDataObj[key] === '') {
                delete formDataObj[key];
            }
        });

        let url = form.action;
        if (form.id === 'formAluno') {
            url = '/aluno';
        } else if (form.id === 'formAcademia') {
            url = '/academia';
        } else if (form.id === 'formProfissional') {
            url = '/profissional';
        }

        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams(formDataObj).toString()
        });

        // Tenta obter a resposta como JSON, mas lida com respostas de texto também
        let result;
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
            result = await response.json();
        } else {
            const text = await response.text();
            try {
                result = JSON.parse(text);
            } catch (e) {
                result = { message: text };
            }
        }
        
        if (response.ok) {
            showNotificationAndRedirect(true, successMessage);
        } else {
            showNotificationAndRedirect(false, result.message || 'Ocorreu um erro ao processar seu cadastro.');
        }
    } catch (error) {
        console.error('Erro ao enviar formulário:', error);
        showNotificationAndRedirect(false, 'Erro de conexão. Por favor, tente novamente.');
    }
}

// Torna a função showForm disponível globalmente
function showForm(formType) {
    // Esconde todos os formulários
    document.getElementById('registerAluno').style.display = 'none';
    document.getElementById('registerAcademia').style.display = 'none';
    document.getElementById('registerProfissional').style.display = 'none';

    // Mostra o formulário selecionado
    document.getElementById('register' + formType.charAt(0).toUpperCase() + formType.slice(1)).style.display = 'block';
}

// Inicialização da página
        document.addEventListener('DOMContentLoaded', function () {
            // Mostra apenas o formulário de aluno por padrão
            showForm('aluno');
            
            // Adiciona validação e envio ao formulário de aluno
            const alunoForm = document.querySelector('form[action="aluno"]');
            if (alunoForm) {
                alunoForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    if (validateForm(e, 'cpfRegister', 'cpfError')) {
                        const formData = new FormData(alunoForm);
                        handleFormSubmit(alunoForm, formData, 'Cadastro de aluno realizado com sucesso! Redirecionando para login...');
                    }
                });
            }
            
            // Adiciona validação e envio ao formulário de academia
            const academiaForm = document.querySelector('form[action="academia"]');
            if (academiaForm) {
                academiaForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    if (validateAcademiaForm(e)) {
                        const formData = new FormData(academiaForm);
                        handleFormSubmit(academiaForm, formData, 'Cadastro de academia realizado com sucesso! Redirecionando para login...');
                    }
                });
            }
            
            // Adiciona validação e envio ao formulário de profissional
            const profissionalForm = document.querySelector('form[action="/profissional"]');
            if (profissionalForm) {
                profissionalForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    if (validateForm(e, 'numberDoc', 'cpfProfError')) {
                        const formData = new FormData(profissionalForm);
                        handleFormSubmit(profissionalForm, formData, 'Cadastro de profissional realizado com sucesso! Redirecionando para login...');
                    }
                });
            }
        });
    </script>
    <!-- Simple Notify JS -->
    <script src="https://cdn.jsdelivr.net/npm/simple-notify@1.0.4/dist/simple-notify.min.js"></script>
</head>

<body>
    <header>
        <a href="/"><img src="img/logoPng3.png" alt="Logo Gymtri" width="80px"></a>
        <nav id="menu">
            <ul>
                <li> <a href="/produtos" class="navConfig">Produtos</a></li>
                <li><a href="/#plansValueContainer" class="navConfig">Planos</a></li>
                <li><a href="/#blockAdvantage" class="navConfig">Vantagens</a></li>
            </ul>
        </nav>

        <nav id="menu2">
            <ul>
                <li><a href="/cadastro" class="navConfig" id="linkRegister">Cadastre-se</a></li>
                <li><a href="/login" class="navConfig">Entrar</a></li>
            </ul>
        </nav>

        <input type="checkbox" id="menuHamburguer">

        <label for="menuHamburguer" class="menuBtn">
            <span></span>
            <span></span>
            <span></span>
        </label>

        <nav id="menuHamb">
            <ul>
                <li> <a href="/produtos" class="navConfig">Produtos</a></li>
                <li><a href="/#plansValueContainer" class="navConfig">Planos</a></li>
                <li><a href="/#blockAdvantage" class="navConfig">Vantagens</a></li>
                <li><a href="/cadastro" class="navConfig">Cadastre-se</a></li>
                <li><a href="/login" class="navConfig">Entrar</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section id="title" class="h1Title">
            <h1>Escolha como deseja se cadastrar</h1>
        </section>
        <hr>

        <section id="blockChoose">
            <section id="chooseUserRegister">
                <button class="btnChoose" onclick="showForm('aluno')" type="button">Aluno</button>
                <button class="btnChoose" onclick="showForm('academia')" type="button">Academia</button>
                <button class="btnChoose" onclick="showForm('profissional')" type="button">Profissional</button>
            </section>
        </section>

        <!-- Cadastro Aluno -->
        <section class="sectMargin" id="registerAluno" style="display: none;">
            <form id="formAluno" action="aluno" method="post">
                <section id="fullnameInput">
                    <label for="fullname" class="titleLabel">Nome completo</label>
                    <br>
                    <input id="fullname" name="fullname" type="text" placeholder="Digite seu nome completo" required>
                </section>

                <br>

                <section class="sectMargin" id="emailRegisterInput">
                    <label for="emailRegister" class="titleLabel">E-mail</label>
                    <br>
                    <input id="emailRegister" name="emailRegister" type="email" placeholder="Digite seu e-mail"
                        required>
                </section>

                <br>

                <section id="dateInput">
                    <label for="dataNasc" class="titleLabel">Data de nascimento</label>
                    <br>
                    <input id="dataNasc" name="dataNasc" type="date" placeholder="Informe sua data de nascimento"
                        required>
                </section>

                <br>
                <section class="sectMargin" id="passwordInput">
                    <label for="passwordRegister" class="titleLabel">Senha</label>
                    <input type="password" name="passwordRegister" id="passwordRegister" placeholder="Insira sua senha"
                        required>
                </section>

                <br>

                <section class="sectMargin" id="passwordConfirmInput">
                    <label for="passwordRegisterConfirm" class="titleLabel">Confirmar senha</label>
                    <input type="password" name="passwordRegisterConfirm" id="passwordRegisterConfirm"
                        placeholder="Confirme sua senha" required>
                </section>

                <br>

                <section class="sectMargin" id="cepInput">
                    <label for="cep" class="titleLabel">CEP</label>
                    <input type="text" name="cep" id="cep" placeholder="CEP" onblur="pesquisacep(this.value, 'aluno')"
                        onkeyup="mascaraCEP(event)" required>
                </section>

                <br>

                <section class="sectMargin" id="ruaInput">
                    <label for="rua" class="titleLabel">Rua</label>
                    <input type="text" name="rua" id="rua" placeholder="Rua" required>
                </section>

                <br>

                <section class="sectMargin" id="bairroInput">
                    <label for="bairro" class="titleLabel">Bairro</label>
                    <input type="text" name="bairro" id="bairro" placeholder="Bairro" required>
                </section>

                <br>

                <section class="sectMargin" id="cidadeInput">
                    <label for="cidade" class="titleLabel">Cidade</label>
                    <input type="text" name="cidade" id="cidade" placeholder="Cidade" required>
                </section>

                <br>

                <section class="sectMargin" id="ufInput">
                    <label for="uf" class="titleLabel">UF</label>
                    <input type="text" name="uf" id="uf" placeholder="UF" required>
                </section>

                <br>

                <section class="sectMargin" id="numeroInput">
                    <label for="numero" class="titleLabel">Número</label>
                    <input type="text" name="numero" id="numero" placeholder="Número" required>
                </section>

                <br>

                <section class="sectMargin" id="complementoInput">
                    <label for="complemento" class="titleLabel">Complemento</label>
                    <input type="text" name="complemento" id="complemento" placeholder="Complemento">
                </section>

                <section class="sectMargin" id="numberAndCpf">
                    <section>
                        <label for="numberRegister" class="titleLabel">Telefone</label>
                        <input type="text" name="numberRegister" id="numberRegister" placeholder="Ex: 11940028922"
                            maxlength="11" required>
                    </section>
                    <section>
                        <label for="cpfRegister" class="titleLabel">CPF</label>
                        <input type="text" name="cpfRegister" id="cpfRegister" placeholder="Digite seu CPF"
                            maxlength="14"pattern="\d{3}[\.\-]?\d{3}[\.\-]?\d{3}[\.\-]?\d{2}" 
                            oninput="handleCPFInput(this, 'cpfError')" required>
                        <div id="cpfError" style="color: red; font-size: 12px; display: none;"></div>
                    </section>
                </section>

                <br>

                <section>
                    <label class="titleLabel" for="choicePlans">Escolha o plano:</label>
                    <select name="plans" id="choicePlans" required>
                        <option id="null2" value="">Escolha o plano</option>
                        <option value="Gratuito">Gratuito</option>
                        <option value="Básico">Básico</option>
                        <option value="Intermediário">Intermediário</option>
                        <option value="Pro">Premium</option>
                    </select>
                </section>

                <section id="card" class="h1Title">
                    <h1>DADOS DO CARTÃO</h1>
                </section>

                <hr>

                <section class="sectMargin" id="numberCard">
                    <label for="numberCardRegister" class="titleLabel">Número do cartão</label>
                    <input type="text" name="numberCardRegister" id="numberCardRegister"
                        placeholder="Insira o número do cartão (Sem ' . ')" required>
                </section>

                <br>

                <section class="sectMargin" id="nameCard">
                    <label for="nameCardRegister" class="titleLabel">Nome impresso no cartão</label>
                    <input type="text" name="nameCardRegister" id="nameCardRegister"
                        placeholder="Digite como está impresso no cartão" required>
                </section>

                <br>

                <section class="sectMargin" id="codeValidation">
                    <section>
                        <label for="validityDate" class="titleLabel">Validade</label>
                        <input type="text" name="validityDate" id="validityDate" placeholder="Ex: 02/29" maxlength="5"
                            required>
                    </section>
                    <section>
                        <label for="cvvValidation" class="titleLabel">CVV</label>
                        <input type="text" name="cvvValidation" id="cvvValidation" placeholder="3 digitos no verso"
                            maxlength="3" required>
                    </section>
                </section>

                <section id="buttonInput">
                    <button type="submit" id="confirmRegister">Confirmar Cadastro</button>
                </section>

                <section id="textLogin">
                    <a href="/login">Já possuo uma conta</a>
                </section>
            </form>
        </section>

        <!-- Cadastro Academia -->
        <section id="registerAcademia" style="display: none;">
            <form id="formAcademia" action="academia" method="post">
                <section class="sectMargin" id="nameAcademyInput">
                    <label for="nameAcademyRegister" class="titleLabel">Nome da academia</label>
                    <br>
                    <input id="nameAcademyRegister" name="nameAcademyRegister" type="text"
                        placeholder="Digite o nome da academia" required>
                </section>

                <br>

                <section class="sectMargin" id="cpnjAcademyInput">
                    <label for="cpnjAcademyRegister" class="titleLabel">CNPJ</label>
                    <br>
                    <input type="text" name="cpnjAcademyRegister" id="cpnjAcademyRegister"
                        placeholder="Digite o CNPJ de sua academia" maxlength="18" 
                        pattern="\d{2}\.?\d{3}\.?\d{3}/?\d{4}-?\d{2}"
                        oninput="handleCNPJInput(this, 'cnpjError')" required>
                    <div id="cnpjError" style="color: red; font-size: 12px; display: none;"></div>
                </section>

                <br>

                <section class="sectMargin" id="emailAcademyInput">
                    <label for="emailAcademyRegister" class="titleLabel">E-mail</label>
                    <br>
                    <input id="emailAcademyRegister" name="emailAcademyRegister" type="email"
                        placeholder="Digite o email da academia" required>
                </section>

                <section class="sectMargin" id="cellAcademyInput">
                    <label for="cellAcademyRegister" class="titleLabel">Telefone</label>
                    <br>
                    <input id="cellAcademyRegister" name="cellAcademyRegister" type="text"
                        placeholder="Digite o telefone da academia" required>
                </section>

                <br>

                <section class="sectMargin" id="passwordAcademyInput">
                    <label for="passwordAcademyRegister" class="titleLabel">Senha</label>
                    <input type="password" name="passwordAcademyRegister" id="passwordAcademyRegister"
                        placeholder="Insira sua senha" required>
                </section>

                <br>

                <section class="sectMargin" id="passConfirmInput">
                    <label for="passAcademyConfirm" class="titleLabel">Confirmar senha</label>
                    <input type="password" name="passAcademyConfirm" id="passAcademyConfirm"
                        placeholder="Confirme sua senha" required>
                </section>

                <br>

                <section class="sectMargin" id="cepInput">
                    <label for="cepAcad" class="titleLabel">CEP</label>
                    <input type="text" name="cepAcad" id="cepAcad" placeholder="CEP"
                        onblur="pesquisacep(this.value, 'academia')" onkeyup="mascaraCEPAcad(event)" required>
                </section>

                <br>

                <section class="sectMargin" id="ruaInput">
                    <label for="ruaAcad" class="titleLabel">Rua</label>
                    <input type="text" name="ruaAcad" id="ruaAcad" placeholder="Rua" readonly required>
                </section>

                <br>

                <section class="sectMargin" id="bairroInput">
                    <label for="bairroAcad" class="titleLabel">Bairro</label>
                    <input type="text" name="bairroAcad" id="bairroAcad" placeholder="Bairro" required>
                </section>

                <br>

                <section class="sectMargin" id="cidadeInput">
                    <label for="cidadeAcad" class="titleLabel">Cidade</label>
                    <input type="text" name="cidadeAcad" id="cidadeAcad" placeholder="Cidade" required>
                </section>

                <br>

                <section class="sectMargin" id="ufInput">
                    <label for="ufAcad" class="titleLabel">UF</label>
                    <input type="text" name="ufAcad" id="ufAcad" placeholder="UF" required>
                </section>

                <br>

                <section class="sectMargin" id="numeroInput">
                    <label for="numeroAcad" class="titleLabel">Número</label>
                    <input type="text" name="numeroAcad" id="numeroAcad" placeholder="Número" required>
                </section>

                <br>

                <section class="sectMargin" id="complementoInput">
                    <label for="complementoAcad" class="titleLabel">Complemento</label>
                    <input type="text" name="complementoAcad" id="complementoAcad" placeholder="Complemento">
                </section>

                <section class="sectMargin" id="capacityAcademyInput">
                    <label for="capacityAcademyRegister" class="titleLabel">Capacidade</label>
                    <input type="number" name="capacityAcademyRegister" id="capacityAcademyRegister"
                        placeholder="Número máximo de alunos por horário" required>
                </section>

                <section class="sectMargin" id="hourAcademyInput">
                    <label for="hourAcademyRegister" class="titleLabel">Horário de funcionamento</label>
                    <section class="hourAcademy">
                        <section class="blockHour">
                            <p>Abertura</p>
                            <input type="time" name="hourAcademyRegisterAb" id="hourAcademyRegisterAb" required>
                        </section>
                        <section class="blockHour">
                            <p>Encerramento</p>
                            <input type="time" name="hourAcademyRegisterEnc" id="hourAcademyRegisterEnc" required>
                        </section>
                    </section>
                </section>

                <section class="sectMargin" id="activityAcademyInput">
                    <label for="activityAcademyRegister" class="titleLabel">Atividades disponíveis</label>
                    <section id="activityBlock">
                        <input type="checkbox" name="musculacao" id="musculacao" value="Musculação">
                        <label for="musculacao">Musculação</label>
                        <br>
                        <input type="checkbox" name="crossfit" id="crossfit" value="Crossfit">
                        <label for="crossfit">Crossfit</label>
                        <br>
                        <input type="checkbox" name="cardio" id="cardio" value="Treinos Cardiovasculares">
                        <label for="cardio">Treinos Cardiovasculares</label>
                        <br>
                        <input type="checkbox" name="lutas" id="lutas" value="Lutas">
                        <label for="lutas">Lutas</label>
                        <br>
                        <input type="checkbox" name="danca" id="danca" value="Danças">
                        <label for="danca">Danças</label>
                        <br>
                        <input type="checkbox" name="gisnastica" id="gisnastica" value="Ginástica">
                        <label for="gisnastica">Ginástica</label>
                        <br>
                        <input type="checkbox" name="natacao" id="natacao" value="Natação">
                        <label for="natacao">Natação</label>
                        <br>
                        <input type="checkbox" name="pilates" id="pilates" value="Pilates">
                        <label for="pilates">Pilates</label>
                        <br>
                        <input type="checkbox" name="yoga" id="yoga" value="Yoga">
                        <label for="yoga">Yoga</label>
                    </section>
                </section>

                <section id="buttonInput">
                    <button type="submit" id="confirmRegister">Confirmar Cadastro</button>
                </section>

                <section id="textLogin">
                    <a href="/login">Já possuo uma conta</a>
                </section>
            </form>
        </section>

        <!-- Cadastro Profissional -->
        <section id="registerProfissional" style="display: none;">
            <form id="formProfissional" action="/profissional" method="post">
                <section class="sectMargin" id="fullnameInput">
                    <label for="fullname" class="titleLabel">Nome completo</label>
                    <br>
                    <input id="fullname" name="fullname" type="text" placeholder="Digite seu nome completo" required>
                </section>

                <br>

                <section class="sectMargin" id="emailRegisterInput">
                    <label for="emailRegister" class="titleLabel">E-mail</label>
                    <br>
                    <input id="emailRegister" name="emailRegister" type="email" placeholder="Digite seu e-mail"
                        required>
                </section>

                <section class="sectMargin" id="numberAndCpf">

                    <section class="sectMargin" id="professionRegisterInput">
                        <label for="professionRegister" class="titleLabel">Profissão</label>
                        <br>
                        <select name="profession" id="profession" required>
                            <option value="">Selecione a especialidade</option>
                            <option value="Nutricionista">Nutricionista</option>
                            <option value="Personal Trainer">Personal Trainer</option>
                        </select>
                    </section>

                    <section class="sectMargin" id="profissionalRegister">
                        <label for="profissionalReg" class="titleLabel">Registro profissional</label>
                        <input type="text" name="profissionalReg" id="profissionalReg"
                            placeholder="Informe seu registro profissional (Número CRM ou CRN)." required>
                    </section>

                    <br>
                    <section class="sectMargin" id="passwordInput">
                        <label for="passwordRegister" class="titleLabel">Senha</label>
                        <input type="password" name="passwordRegister" id="passwordRegister"
                            placeholder="Insira sua senha" required>
                    </section>

                    <br>

                    <section class="sectMargin" id="passwordConfirmInput">
                        <label for="passwordRegisterConfirm" class="titleLabel">Confirmar senha</label>
                        <input type="password" name="passwordRegisterConfirm" id="passwordRegisterConfirm"
                            placeholder="Confirme sua senha" required>
                    </section>

                    <br>

                    <section class="sectMargin" id="numberAndCpf">
                        <section>
                            <label for="numberRegister" class="titleLabel">Telefone</label>
                            <input type="text" name="numberRegister" id="numberRegister" placeholder="Ex: 11940028922"
                                maxlength="11" required>
                        </section>
                        <section>
                            <label for="numberDoc" class="titleLabel">CPF</label>
                            <input type="text" name="numberDoc" id="numberDoc" placeholder="Digite seu CPF"
                                maxlength="14" pattern="[0-9]{3}.?[0-9]{3}.?[0-9]{3}[\-]?[0-9]{2}"
                                oninput="handleCPFInput(this, 'cpfProfError')" required>
                            <div id="cpfProfError" style="color: red; font-size: 12px; display: none;"></div>
                        </section>
                    </section>

                    <section id="buttonInput">
                        <button type="submit" id="confirmRegister">Confirmar Cadastro</button>
                    </section>

                    <section id="textLogin">
                        <a href="/login">Já possuo uma conta</a>
                    </section>
            </form>
        </section>
    </main>
</body>

</html>